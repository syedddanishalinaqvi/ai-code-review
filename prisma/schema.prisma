datasource db {
  provider = "postgresql"  // or "sqlite" for a quick MVP
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

/// A user of your app, logged in via GitHub OAuth.
model User {
  id            String         @id @default(cuid())
  githubId      Int?            @unique             // GitHub numeric ID
  username      String?         @unique             // GitHub login/handle
  name          String?                             // Display name
  email         String?         @unique
  avatarUrl     String?
  installations Installation[]                       // Linked installations
  reviews       Review[]                             // Reviews they've triggered
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

/// A GitHub App installation (mapping between your app and a repo owner/account)
model Installation {
  id             String   @id @default(cuid())
  installationId Int      @unique                     // GitHub installation ID
  ownerLogin     String                               // e.g. "octocat"
  ownerId        Int                                  // GitHub's owner numeric ID
  accountType    String                               // "User" or "Organization"
  repositories   Json                                 // Store repo list or keep minimal & fetch later
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  reviews        Review[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

/// Stores results of AI reviews on specific pull requests
model Review {
  id             String       @id @default(cuid())
  installation   Installation @relation(fields: [installationId], references: [id])
  installationId String
  user           User         @relation(fields: [userId], references: [id])
  userId         String
  repoName       String
  prNumber       Int
  prTitle        String
  aiSummary      String        // Overall summary text
  aiComments     Json          // Optional: store detailed comments as JSON
  createdAt      DateTime      @default(now())
}
